{"version":3,"sources":["components/QuoteCard.js","App.js","serviceWorker.js","index.js"],"names":["QuoteCard","_this$props","this","props","getQuote","quote","author","color","href","react_default","a","createElement","id","style","className","target","rel","onClick","Component","generateK","keygen","index","Math","floor","random","API","endpoint","method","lang","format","key","jsonp","colors","geekyQuotes","who","url","twitter","concat","App","state","randomColor","length","getGeekQuote","_callee","_data","__data","regenerator_default","wrap","_context","prev","next","fetch","then","res","json","data","catch","error","console","log","sent","_this","setState","quoteAuthor","quoteText","stop","componentWillMount","_this$state","_color","background","bind","components_QuoteCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c13ee929.chunk.js","sourcesContent":["import React, {Component} from 'react';\nclass QuoteCard extends Component {\n    render() { \n      const { getQuote, quote, author, color, href } = this.props;\n        return (\n            <div id=\"quote-box\" style={color}>\n                <div id=\"quotes-icons-container\">\n                    <i id=\"left\" className=\"fas fa-quote-left\" />\n                    <i id=\"right\" className=\"fas fa-quote-right\" />\n                </div>\n\n                <div id=\"quote-content\">\n                    <div id=\"texts-content\">\n                        <h2 id=\"text\">{ quote || \"Quote\"}</h2>\n                        <p id=\"author\">{ author || \"Author\"}</p>\n                    </div>\n                </div>\n                <div className=\"buttons-container\">\n                    <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i id=\"icon-twitter\" className=\"fab fa-twitter\" />\n                    </a>\n                    <button id=\"new-quote\"onClick={getQuote}>New quote</button>\n                </div>\n            </div>\n            );\n        }\n    }\n    \n    export default QuoteCard;","import React, { Component } from 'react';\nimport QuoteCard from './components/QuoteCard';\nimport './App.css';\n\nconst generateK = () => {\n  let keygen = '', index = 0;\n  while (index < 6){\n    keygen += Math.floor( Math.random() * 10 );\n    index ++;\n    }\n  return keygen;\n}\n\ngenerateK()\nconst API = {\n  endpoint: 'https://api.forismatic.com/api/1.0/',\n  method: 'getQuote',\n  lang:'en',\n  format:'json',\n  key: generateK(),\n  jsonp: 'callback'\n}\nconst colors = [\n  \"#e8e2db\",\n  \"#fab95b\",\n  \"#f5564e\",\n  \"#1a3263\",\n  \"#ffe79a\",\n  \"#ef5a5a\",\n  \"#729d39\",\n  \"#75cac3\",\n  \"009f9d\"\n];\nconst geekyQuotes = [\n  {\n    who: \"Roy\",\n    quote: \"Have you tried turning it off and on again?\"\n  },\n  {\n    who: \"Moss\",\n    quote: \"Have you tried forcing an unexpected reboot?\"\n  },\n  {\n    who: \"Moss\",\n    quote: `Well that's easy to remember: 0118 999 88199 9119 725! . . . 3.`\n  },\n  {\n    who: \"Moss\",\n    quote: `I'm a 32 year old IT-man who works in a basement. Yes, I do the whole Lonely Hearts thing!`\n  },\n  {\n    who: \"Jen\",\n    quote: `Oh my God. I didn't even know Smarties made a cereal.`\n  },\n  {\n    who: \"Roy\",\n    quote: `I am a man, he's a man, we're men!`\n  },\n  {\n    who: \"Roy\",\n    quote: `Oh, I'm very comfortable with my sexuality, I just don't want to be slapped in the face with their sexuality.`\n  },\n  {\n    who: \"Roy\",\n    quote: `I'm disabled....Leg disabled`\n  },\n  {\n    who: \"Peter\",\n    quote: `Oh, it's filepeter@hotmail.com.`\n  },\n  {\n    who: \"Douglas Reynholm\",\n    quote: `You've got spunk and balls, and I like that in a woman.`\n  },\n  {\n    who: \"Moss\",\n    quote: `Not as nice as your momma's glasses!`\n  },\n  {\n    who: \"Moss\",\n    quote: \"They just toss us away like yesterday's jam.\"\n  },\n  {\n    who: \"Moss\",\n    quote:\n      \" Did you notice how she didn't even get excited when she saw this original ZX81\"\n  },\n  {\n    who: \"Moss\",\n    quote: \" Memory is RAM!\"\n  },\n  {\n    who: \"Jen\",\n    quote:\n      \"What does IT mean?! You know, computers? Something to do with computers probably?\"\n  },\n  {\n    who: \"Moss\",\n    quote: \"Of course it is, Jen! The internet doesn't weigh anything!\"\n  },\n  {\n    who: \"Douglas Reynholm\",\n    quote: \"That's right, I totally love the bloody arse off you.\"\n  },\n  {\n    who: \"Moss\",\n    quote:\n      \"I came here to drink milk and kick ass. And I've just finished my milk.\"\n  },\n  {\n    who: \"Roy\",\n    quote: \"Because he's too small Jen. He's clearly too small to be a barista!\"\n  }\n];\nconst { endpoint, method, format, lang, key } = API;\nconst url = {\n  twitter : 'https://twitter/intent/text=',\n  API : `${endpoint}?method=${method}&format=${format}&lang=${lang}&key=${key}`\n}\n\nclass App extends Component {\n  state = {}\n\n  randomColor = () => {\n    let index = Math.floor(Math.random() * colors.length);\n    return colors[index];\n  };\n\n  getGeekQuote = () => {\n    let index = Math.floor( Math.random() * geekyQuotes.length);\n    return geekyQuotes[index];\n  }\n\n  //w/ cross origin ressources sharing on\n  getQuote = async () => {\n    let _data = await fetch(url.API)\n       .then((res) => res.json())\n       .then(function (data) {\n         return data\n       })\n       .catch((error) => console.log(' error', error))\n\n   if(_data) {\n     this.setState({\n       who: _data.quoteAuthor,\n       quote: _data.quoteText,\n       color: this.randomColor()\n     })\n   } else {\n     let __data = this.getGeekQuote ();\n     if(__data){\n       this.setState({\n         who: __data.who,\n         quote: __data.quote,\n         color: this.randomColor()\n       })\n     }\n   }\n  };\n\n componentWillMount = () => {\n   this.getQuote()\n   this.getGeekQuote()\n }\n\n  render() { \n    const { who, quote, color } = this.state;\n    let _color = { background: color };\n    let href = `https://twitter.com/intent/tweet?text=${quote}`;\n    const getQuote = this.getQuote.bind(this) || this.getGeekQuote.bind(this)\n    return (\n      <div className=\"App\">\n          <QuoteCard getQuote={getQuote} who={who} quote={quote} author={who} color={_color} href={href}/>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}